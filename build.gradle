subprojects {
    apply plugin: 'base'

    repositories {
        ['cloudark', 'localhost'].each { host ->
            maven {
                url "http://$host:8081/artifactory/local"
                credentials {
                    username = findProperty('cloudarkUser')
                    password = findProperty('cloudarkApiKey')
                }
            }
        }
    }

    configurations {
        data
    }

    dependencies {
        data group: 'org.m2ci.msp.eyetracking', name: "eyetracking-multimedia-$project.name", version: '1.0-SNAPSHOT', ext: 'mkv'
        data group: 'org.m2ci.msp.eyetracking', name: "raw-data-$project.name-praat", version: '0.1', ext: 'zip'
        data group: 'org.m2ci.msp.eyetracking', name: "raw-data-$project.name-textgrid", version: '0.1', ext: 'zip'
        data group: 'org.m2ci.msp.eyetracking', name: "raw-data-$project.name-tobii", version: '0.1', ext: 'zip'
    }

    task unpackData(type: Copy) {
        from configurations.data
        into "$buildDir/rawData"
        filesMatching '*.zip', { zipFileDetails ->
            project.copy {
                from project.zipTree(zipFileDetails.file)
                into destinationDir
            }
            zipFileDetails.exclude()
        }
        filesMatching '*.mkv', { mkvFileDetails ->
            project.exec {
                commandLine 'ffmpeg', '-i', mkvFileDetails.file,
                        '-map', '0:0', '-codec', 'copy', "$destinationDir/screencapture.mp4",
                        '-map', '0:1', '-codec', 'copy', "$destinationDir/audio.flac",
                        '-loglevel', 'panic', '-y'
            }
            mkvFileDetails.exclude()
        }
    }

    task convertPraatLogToYaml(type: ConvertPraatLogToYaml) {
        dependsOn unpackData
        srcFile = file("$unpackData.destinationDir/praat.log")
        destFile = file("$buildDir/data/praat.yaml")
    }

    task convertTobiiLog(type: ConvertTobiiLog) {
        dependsOn unpackData
        srcFile = file("$unpackData.destinationDir/Audio_Data_Export.tsv")
        destFile = file("$buildDir/data/Tobii.json")
    }

    task extractScenes(type: ExtractScenes) {
        dependsOn convertPraatLogToYaml
        srcFile = convertPraatLogToYaml.destFile
        destFile = file("$buildDir/data/scenes.yaml")
    }

    task generatePraatScenes(type: GeneratePraatScenes) {
        dependsOn extractScenes
        scenesFile = extractScenes.destFile
        audioFile = file("$rootDir/src/experiment/northwind_rm.flac")
        destDir = file("$buildDir/scenes")
    }

    task generateSceneVideoSegments(type: GenerateSceneVideoSegments) {
        dependsOn extractScenes, generatePraatScenes
        scenesFile = extractScenes.destFile
        inputDir = generatePraatScenes.destDir
        destDir = file("$buildDir/sceneVideos")
        finalVideoFile = file("$buildDir/sceneMovie.mp4")
    }

    task convertScenesToSrt(type: ConvertScenesToSrt) {
        dependsOn extractScenes
        srcFile = extractScenes.destFile
        destFile = file("$buildDir/data/scenes.srt")
    }

    task mergeTobiiandPraatLogs(type: MergeLogs) {
        dependsOn extractScenes, convertTobiiLog
        praatFile = extractScenes.destFile
        tobiiFile = convertTobiiLog.destFile
        destFile = file("$buildDir/data/mergedData.yaml")
    }

    task drawGazes(type: DrawGazes) {
        dependsOn generateSceneVideoSegments, mergeTobiiandPraatLogs
        srcFile = generateSceneVideoSegments.finalVideoFile
        gazeFile = mergeTobiiandPraatLogs.destFile
        fixSymbol = file("$rootDir/src/images/red_circle.png")
        destFile = file("$buildDir/data/gazeVideo.mp4")
    }

    task muxStreams(type: Exec) {
        dependsOn unpackData, convertScenesToSrt, generateSceneVideoSegments
        def destFile = file("$buildDir/data/${project.name}.mkv")
        outputs.file destFile
        commandLine 'ffmpeg', '-loglevel', 'panic', '-y',
                '-i', file("$generateSceneVideoSegments.finalVideoFile"),
                '-i', file("$unpackData.destinationDir/screencapture.mp4"),
                '-i', file("$unpackData.destinationDir/audio.flac"),
                '-i', convertScenesToSrt.destFile, '-disposition:s:0', 'default',
                '-codec', 'copy', '-map', '0', '-map', '1', destFile
    }
}
